From 8a6bbfeea37e77f62ac9b713a02ce3ea64e57b9e Mon Sep 17 00:00:00 2001
From: Peter Van Sandt <peter.vansandt@gmail.com>
Date: Thu, 30 Jun 2022 04:05:33 -0500
Subject: [PATCH] Integrate lexy with bazel

---
 BUILD                          | 154 +++++++++++++++++++++++++++++++++
 defs.bzl                       |  33 +++++++
 examples/BUILD                 | 118 +++++++++++++++++++++++++
 support/BUILD                  |   5 ++
 support/generate-unicode-db.py |   5 +-
 tests/BUILD                    |   9 ++
 tests/examples/BUILD           |  41 +++++++++
 7 files changed, 363 insertions(+), 2 deletions(-)
 create mode 100644 BUILD
 create mode 100644 defs.bzl
 create mode 100644 examples/BUILD
 create mode 100644 support/BUILD
 create mode 100644 tests/BUILD
 create mode 100644 tests/examples/BUILD

diff --git a/BUILD b/BUILD
new file mode 100644
index 00000000..7df9a13a
--- /dev/null
+++ b/BUILD
@@ -0,0 +1,154 @@
+load("//src/lexy:defs.bzl", "lexy_cc_library")
+cc_library(
+    name = "core",
+    hdrs = [
+
+        "include/lexy/_detail/assert.hpp",
+        "include/lexy/_detail/buffer_builder.hpp",
+        "include/lexy/_detail/code_point.hpp",
+        "include/lexy/_detail/config.hpp",
+        "include/lexy/_detail/detect.hpp",
+        "include/lexy/_detail/integer_sequence.hpp",
+        "include/lexy/_detail/invoke.hpp",
+        "include/lexy/_detail/iterator.hpp",
+        "include/lexy/_detail/lazy_init.hpp",
+        "include/lexy/_detail/memory_resource.hpp",
+        "include/lexy/_detail/nttp_string.hpp",
+        "include/lexy/_detail/stateless_lambda.hpp",
+        "include/lexy/_detail/std.hpp",
+        "include/lexy/_detail/string_view.hpp",
+        "include/lexy/_detail/tuple.hpp",
+        "include/lexy/_detail/type_name.hpp",
+        "include/lexy/action/base.hpp",
+        "include/lexy/action/match.hpp",
+        "include/lexy/action/parse.hpp",
+        "include/lexy/action/parse_as_tree.hpp",
+        "include/lexy/action/scan.hpp",
+        "include/lexy/action/trace.hpp",
+        "include/lexy/action/validate.hpp",
+        "include/lexy/callback/adapter.hpp",
+        "include/lexy/callback/aggregate.hpp",
+        "include/lexy/callback/base.hpp",
+        "include/lexy/callback/bind.hpp",
+        "include/lexy/callback/bit_cast.hpp",
+        "include/lexy/callback/composition.hpp",
+        "include/lexy/callback/constant.hpp",
+        "include/lexy/callback/container.hpp",
+        "include/lexy/callback/fold.hpp",
+        "include/lexy/callback/forward.hpp",
+        "include/lexy/callback/integer.hpp",
+        "include/lexy/callback/noop.hpp",
+        "include/lexy/callback/object.hpp",
+        "include/lexy/callback/string.hpp",
+        "include/lexy/dsl/any.hpp",
+        "include/lexy/dsl/ascii.hpp",
+        "include/lexy/dsl/base.hpp",
+        "include/lexy/dsl/bits.hpp",
+        "include/lexy/dsl/bom.hpp",
+        "include/lexy/dsl/brackets.hpp",
+        "include/lexy/dsl/branch.hpp",
+        "include/lexy/dsl/byte.hpp",
+        "include/lexy/dsl/capture.hpp",
+        "include/lexy/dsl/case_folding.hpp",
+        "include/lexy/dsl/char_class.hpp",
+        "include/lexy/dsl/choice.hpp",
+        "include/lexy/dsl/code_point.hpp",
+        "include/lexy/dsl/combination.hpp",
+        "include/lexy/dsl/context_counter.hpp",
+        "include/lexy/dsl/context_flag.hpp",
+        "include/lexy/dsl/context_identifier.hpp",
+        "include/lexy/dsl/delimited.hpp",
+        "include/lexy/dsl/digit.hpp",
+        "include/lexy/dsl/eof.hpp",
+        "include/lexy/dsl/error.hpp",
+        "include/lexy/dsl/expression.hpp",
+        "include/lexy/dsl/follow.hpp",
+        "include/lexy/dsl/identifier.hpp",
+        "include/lexy/dsl/if.hpp",
+        "include/lexy/dsl/integer.hpp",
+        "include/lexy/dsl/literal.hpp",
+        "include/lexy/dsl/list.hpp",
+        "include/lexy/dsl/lookahead.hpp",
+        "include/lexy/dsl/loop.hpp",
+        "include/lexy/dsl/member.hpp",
+        "include/lexy/dsl/newline.hpp",
+        "include/lexy/dsl/option.hpp",
+        "include/lexy/dsl/operator.hpp",
+        "include/lexy/dsl/parse_as.hpp",
+        "include/lexy/dsl/peek.hpp",
+        "include/lexy/dsl/position.hpp",
+        "include/lexy/dsl/production.hpp",
+        "include/lexy/dsl/punctuator.hpp",
+        "include/lexy/dsl/recover.hpp",
+        "include/lexy/dsl/repeat.hpp",
+        "include/lexy/dsl/return.hpp",
+        "include/lexy/dsl/scan.hpp",
+        "include/lexy/dsl/separator.hpp",
+        "include/lexy/dsl/sequence.hpp",
+        "include/lexy/dsl/sign.hpp",
+        "include/lexy/dsl/symbol.hpp",
+        "include/lexy/dsl/terminator.hpp",
+        "include/lexy/dsl/times.hpp",
+        "include/lexy/dsl/token.hpp",
+        "include/lexy/dsl/unicode.hpp",
+        "include/lexy/dsl/until.hpp",
+        "include/lexy/dsl/whitespace.hpp",
+        "include/lexy/input/argv_input.hpp",
+        "include/lexy/input/base.hpp",
+        "include/lexy/input/buffer.hpp",
+        "include/lexy/input/file.hpp",
+        "include/lexy/input/lexeme_input.hpp",
+        "include/lexy/input/range_input.hpp",
+        "include/lexy/input/string_input.hpp",
+        "include/lexy/callback.hpp",
+        "include/lexy/code_point.hpp",
+        "include/lexy/dsl.hpp",
+        "include/lexy/encoding.hpp",
+        "include/lexy/error.hpp",
+        "include/lexy/grammar.hpp",
+        "include/lexy/input_location.hpp",
+        "include/lexy/lexeme.hpp",
+        "include/lexy/parse_tree.hpp",
+        "include/lexy/token.hpp",
+        "include/lexy/visualize.hpp",
+
+    ],
+    strip_include_prefix = "include",
+    visibility = ["//visibility:public"],
+)
+
+# copts come from downstream. use binary
+alias(name = "dev", actual = "core", visibility = ["//src/lexy:__subpackages__"])
+
+cc_library(
+    name = "ext",
+    hdrs = [
+        "include/lexy_ext/compiler_explorer.hpp",
+        "include/lexy_ext/parse_tree_algorithm.hpp",
+        "include/lexy_ext/parse_tree_doctest.hpp",
+        "include/lexy_ext/report_error.hpp",
+        "include/lexy_ext/shell.hpp",
+    ],
+    strip_include_prefix = "include",
+    deps = [":core"],
+    visibility = ["//visibility:public"],
+)
+
+lexy_cc_library(
+    name = "file",
+    srcs = [":src/input/file.cpp"],
+    deps = [":dev"],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "unicode_database",
+    exec_tools = ["//src/lexy/support:generate-unicode-db"],
+    outs = ["include/lexy/_detail/unicode_database.hpp"],
+    cmd = "FILES=($(SRCS)) ; LEXY_UNICODE_DATABASE_VERSION=14.0.0 LEXY_UCD_URL=file://$$(realpath $$(dirname $${FILES[0]}))/ $(location //src/lexy/support:generate-unicode-db) $@",
+    srcs = ["//src/unicode.org-ucd"],
+)
+
+cc_library(name = "unicode", hdrs = [":unicode_database"], defines = ["LEXY_HAS_UNICODE_DATABASE=1"], strip_include_prefix = "include", visibility = ["//visibility:public"])
+
+cc_library(name = "lexy", deps = [":core", ":file", ":unicode", ":ext"], visibility = ["//visibility:public"])
diff --git a/defs.bzl b/defs.bzl
new file mode 100644
index 00000000..dd62c20d
--- /dev/null
+++ b/defs.bzl
@@ -0,0 +1,33 @@
+
+_lexy_copts = [
+"-pedantic-errors", "-Werror", "-Wall", "-Wextra", "-Wconversion", "-Wsign-conversion", "-Wno-shift-op-parentheses", "-Wno-parentheses-equality"
+]
+_lexy_gcc_copts = [
+        "-std=c++20",
+        "-pedantic-errors",
+        "-Werror",
+        "-Wall",
+        "-Wextra",
+        "-Wconversion",
+        "-Wsign-conversion",
+        "-Wno-parentheses",
+        "-Wno-unused-local-typedefs",
+        "-Wno-array-bounds",
+        "-Wno-maybe-uninitialized",
+        "-Wno-restrict"
+]
+_lexy_deps = ["@tools_cpp_toolchain"]
+
+def _lexy_kwargs(kwargs):
+    kwargs["copts"] = kwargs.get("copts", []) + _lexy_gcc_copts
+    kwargs["deps"] = kwargs.get("deps", []) + _lexy_deps
+    return kwargs
+
+def lexy_cc_binary(**kwargs):
+    native.cc_binary(**_lexy_kwargs(kwargs))
+
+def lexy_cc_library(**kwargs):
+    native.cc_library(**_lexy_kwargs(kwargs))
+
+def lexy_cc_test(**kwargs):
+    native.cc_test(**_lexy_kwargs(kwargs))
diff --git a/examples/BUILD b/examples/BUILD
new file mode 100644
index 00000000..801ca0be
--- /dev/null
+++ b/examples/BUILD
@@ -0,0 +1,118 @@
+load("//src/lexy:defs.bzl", "lexy_cc_binary", "lexy_cc_library")
+
+lexy_cc_binary(
+    name = "config",
+    srcs = ["config.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "calculator",
+    srcs = ["calculator.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:unicode", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "email",
+    srcs = ["email.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "ip_address",
+    srcs = ["ip_address.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "json",
+    srcs = ["json.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "protobuf",
+    srcs = ["protobuf.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "shell",
+    srcs = ["shell.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "xml",
+    srcs = ["xml.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_binary(
+    name = "turing",
+    srcs = ["turing.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+)
+
+lexy_cc_library(
+    name = "config_hdr",
+    hdrs = ["config.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "calculator_hdr",
+    hdrs = ["calculator.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:unicode", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "email_hdr",
+    hdrs = ["email.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "ip_address_hdr",
+    hdrs = ["ip_address.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "json_hdr",
+    hdrs = ["json.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "protobuf_hdr",
+    hdrs = ["protobuf.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "shell_hdr",
+    hdrs = ["shell.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "xml_hdr",
+    hdrs = ["xml.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
+
+lexy_cc_library(
+    name = "turing_hdr",
+    hdrs = ["turing.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:ext"],
+    visibility = ["//src/lexy/tests/examples:__subpackages__"],
+)
diff --git a/support/BUILD b/support/BUILD
new file mode 100644
index 00000000..27ba4076
--- /dev/null
+++ b/support/BUILD
@@ -0,0 +1,5 @@
+py_binary(
+    name = "generate-unicode-db",
+    srcs = ["generate-unicode-db.py"],
+    visibility = ["//src/lexy:__subpackages__"],
+)
diff --git a/support/generate-unicode-db.py b/support/generate-unicode-db.py
index 81c9335a..98f858f6 100755
--- a/support/generate-unicode-db.py
+++ b/support/generate-unicode-db.py
@@ -5,8 +5,9 @@
 # This compresses very well.
 # The generated arrays themselves are written as string literals, which are more efficiently represented in compilers.
 
-UNICODE_VERSION = '14.0.0'
-UCD_URL = f'https://www.unicode.org/Public/{UNICODE_VERSION}/ucd/'
+import os
+UNICODE_VERSION = os.getenv("LEXY_UNICODE_DATABASE_VERSION", "14.0.0")
+UCD_URL = os.getenv("LEXY_UCD_URL", f'https://www.unicode.org/Public/{UNICODE_VERSION}/ucd/')
 
 #=== Unicode Database ===#
 import urllib.request
diff --git a/tests/BUILD b/tests/BUILD
new file mode 100644
index 00000000..f47acf03
--- /dev/null
+++ b/tests/BUILD
@@ -0,0 +1,9 @@
+load("//src/lexy:defs.bzl", "lexy_cc_library")
+
+lexy_cc_library(
+    name = "base",
+    srcs = ["doctest_main.cpp"],
+    deps = ["//src/lexy:dev", "//src/lexy:file", "//src/lexy:unicode", "//src/doctest:angle"],
+    defines = ["LEXY_TEST"],
+    visibility = ["//src/lexy/tests:__subpackages__"],
+)
diff --git a/tests/examples/BUILD b/tests/examples/BUILD
new file mode 100644
index 00000000..3ba1064e
--- /dev/null
+++ b/tests/examples/BUILD
@@ -0,0 +1,41 @@
+load("//src/lexy:defs.bzl", "lexy_cc_test")
+lexy_cc_test(
+    name = "calculator", srcs = ["calculator.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:calculator_hdr"],
+)
+
+lexy_cc_test(
+    name = "email", srcs = ["email.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:email_hdr"],
+)
+
+lexy_cc_test(
+    name = "ip_address", srcs = ["ip_address.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:ip_address_hdr"],
+)
+
+lexy_cc_test(
+    name = "json", srcs = ["json.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:json_hdr"],
+)
+
+lexy_cc_test(
+    name = "protobuf", srcs = ["protobuf.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:protobuf_hdr"],
+)
+
+lexy_cc_test(
+    name = "shell", srcs = ["shell.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:shell_hdr"],
+)
+
+lexy_cc_test(
+    name = "xml", srcs = ["xml.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:xml_hdr"],
+)
+
+lexy_cc_test(
+    name = "turing", srcs = ["turing.cpp"],
+    deps = ["//src/lexy/tests:base", "//src/lexy/examples:turing_hdr"],
+)
+
-- 
2.35.3

